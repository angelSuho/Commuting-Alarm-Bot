name: 'build-docker-deploy'

on:
  push:
    branches:
      - main
      
jobs:
  update:
    name: 프로젝트 Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
  build:
    name: 이미지 빌드 및 도커허브 푸시
    runs-on: ubuntu-latest
    needs: update
    steps:
      - uses: actions/checkout@v3
        with:
          ref: refs/heads/main
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew
      - name: gradle 빌드
        run: ./gradlew build --no-daemon
      - name: build 폴더를 캐시에 저장
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build
          retention-days: 1 
      - name: 도커 이미지 빌드 및 푸시
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/cma_bot:latest .
          docker push ${{ secrets.DOCKER_REPO }}/cma_bot:latest
          
  deploy:
    name: 원격 서버에 배포
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      actions: read
    steps:
      - name: 원격 서버에 배포하기
        uses: appleboy/ssh-action@master
        with:
          host: ec2-3-35-37-217.ap-northeast-2.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo ${{ secrets.DOCKER_HUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            sudo docker stop cma_bot || true
            sudo docker rm cma_bot || true
            sudo docker pull ${{ secrets.DOCKER_REPO }}/cma_bot:latest
            sudo docker run --name=cma_bot --network docker-net --restart unless-stopped \
              -p 8080:8080 -e TZ=Asia/Seoul -d ${{ secrets.DOCKER_REPO }}/cma_bot:latest
            sudo docker image prune -f
      - name: 배포 성공 알림 발송
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          status: ${{ job.status }}
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 배포 ${{ job.status == 'success' && '성공' || '실패' }}
          username: GitHub Actions
          color: ${{ job.status == 'success' && 0x009900 || 0xff0000 }}
